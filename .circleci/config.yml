version: 2.1
executors:
  builder:
    docker:
      - image: docker:git
    environment:
      GLIBC_VERSION: 2.32
    working_directory: ~/docker-glibc-builder
  artefact-uploader:
    docker:
      - image: golang:alpine
    working_directory: ~/docker-glibc-builder
jobs:
  build:
    executor: builder
    steps:
      - checkout
      - setup_remote_docker
      - run:
          command: mkdir -p artefacts
          name: Create directory for storing artefacts
      - run:
          command: docker build . --tag sgerrand/glibc-builder:$CIRCLE_SHA1
          name: Create Docker image
      - run:
          command: docker run --rm --env GLIBC_VERSION --env STDOUT=1 sgerrand/glibc-builder:$CIRCLE_SHA1 > artefacts/glibc-bin-$GLIBC_VERSION-0-$(uname -m).tar.gz
          name: Build glibc package
      - persist_to_workspace:
          root: .
          paths: artefacts
      - store_artifacts:
          path: artefacts
  build-arm64:
    executor: builder
    working_directory: ~/docker-glibc-builder
    steps:
       - checkout
       - attach_workspace:
           at: ~/docker-glibc-builder
       - setup_remote_docker
       - run:
          command: mkdir -p artefacts
          name: Create directory for storing artefacts
       - run:
           name: Activate QEMU
           command:
             docker run -it --rm --privileged multiarch/qemu-user-static  --reset --credential yes --persistent yes
       - run:
           name: Build Glibc for ARM64
           no_output_timeout: 30m
           command: |
             docker build -t odidev/glibc-builder:$CIRCLE_SHA1 -f Dockerfile.aarch64  .
             docker run --rm --env GLIBC_VERSION --env STDOUT=1 odidev/glibc-builder:$CIRCLE_SHA1 >  artefacts/glibc-bin-$GLIBC_VERSION-0-aarch64.tar.gz
       - persist_to_workspace:
           root: .
           paths: artefacts
       - store_artifacts:
           path: artefacts
       - persist_to_workspace:
           root: .
           paths: artefacts
       - store_artifacts:
           path: artefacts

  upload-master:
    executor: artefact-uploader
    steps:
      - run:
          command: apk add --no-cache git openssh-client
          name: Install dependencies of go get
      - attach_workspace:
          at: .
      - run:
          command: go get github.com/tcnksm/ghr
          name: Install ghr executable
      - deploy:
          name: Upload to GitHub release
          command: ghr -r $CIRCLE_PROJECT_REPONAME -u $CIRCLE_PROJECT_USERNAME --prerelease --delete unreleased artefacts
workflows:
  build-compile-upload:
    jobs:
      - build
      - upload-master:
          filters:
            branches:
              only: arm_support
            tags:
              ignore: /.*/
          requires:
            - build

  build-arm64-compile-upload:
    jobs:
      - build-arm64
      - upload-master:
          filters:
            branches:
              only: arm_support
            tags:
              ignore: /.*/
          requires:
            - build-arm64

